generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  phoneNumber       String             @unique
  otp               String?
  role              Role               @default(CUSTOMER)
  addresses         Address[]
  deliveries        Delivery[]
  deliveryAgent     DeliveryAgent?
  deliveryStatuses  DeliveryStatus[]
  feedback          Feedback[]
  feedbackResponses FeedbackResponse[]
  assignedIssues    Issue[]
  mealFeedback      MealFeedback[]
  orders            Order[]
  payments          Payment[]
  subscription      Subscription?
  costApprovals     CostApproval[]
  approvedCosts     Cost[]             @relation("CostApprovals")
  staffCosts        StaffCost[]
}

model Meal {
  id                  String               @id @default(uuid())
  name                String
  description         String
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  price               Float
  type                MealType             @default(LUNCH)
  category            MealCategory
  breakfastDailyMeals DailyMeal[]          @relation("Breakfast")
  dinnerDailyMeals    DailyMeal[]          @relation("Dinner")
  lunchDailyMeals     DailyMeal[]          @relation("Lunch")
  feedback            MealFeedback[]
  menuItems           MenuItem[]
  OrderItem           OrderItem[]
  productionSchedules ProductionSchedule[]
  recipe              Recipe?
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  startDate DateTime           @default(now())
  endDate   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  planId    String
  status    SubscriptionStatus @default(ACTIVE)
  orders    Order[]
  payments  Payment[]
  plan      Plan               @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  price         Float
  mealsPerDay   Int
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Address {
  id         String     @id @default(uuid())
  userId     String
  apartment  String
  tower      String
  floor      String
  roomNumber String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  deliveries Delivery[]
}

model Order {
  id                   String          @id @default(uuid())
  amount               Float
  currency             String          @default("INR")
  status               OrderStatus     @default(PENDING)
  paymentStatus        String?         @default("PENDING")
  paymentSessionId     String?
  paymentLink          String?
  paymentDetails       Json?
  customerName         String
  customerEmail        String
  customerPhone        String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  userId               String
  subscriptionId       String?
  deliveryAddress      String?
  deliveryInstructions String?
  paymentMethod        String?
  delivery             Delivery?
  deliveryStatus       DeliveryStatus?
  subscription         Subscription?   @relation(fields: [subscriptionId], references: [id])
  user                 User            @relation(fields: [userId], references: [id])
  items                OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  mealId    String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  meal      Meal     @relation(fields: [mealId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Delivery {
  id         String   @id @default(uuid())
  orderId    String   @unique
  userId     String
  status     String   @default("PENDING")
  address    String
  addressId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  addressRel Address  @relation(fields: [addressId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Payment {
  id               String        @id @default(uuid())
  orderId          String        @unique
  paymentId        String?
  refundId         String?
  amount           Float
  currency         String
  status           PaymentStatus
  errorCode        String?
  errorDescription String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  subscriptionId   String?
  userId           String
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
}

model DailyMeal {
  id          String   @id @default(uuid())
  date        DateTime
  breakfastId String
  lunchId     String
  dinnerId    String
  skipStatus  Json
  cutoffTime  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  breakfast   Meal     @relation("Breakfast", fields: [breakfastId], references: [id])
  dinner      Meal     @relation("Dinner", fields: [dinnerId], references: [id])
  lunch       Meal     @relation("Lunch", fields: [lunchId], references: [id])
}

model DeliveryStatus {
  id                String              @id @default(uuid())
  orderId           String              @unique
  status            DeliveryStatusEnum
  oldTiffinStatus   OldTiffinStatusEnum
  deliveryTime      DateTime
  deliveryPartnerId String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deliveryPartner   User                @relation(fields: [deliveryPartnerId], references: [id])
  order             Order               @relation(fields: [orderId], references: [id])
}

model MealFeedback {
  id         String   @id @default(uuid())
  mealId     String
  userId     String
  rating     Int
  comments   String?
  categories Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  meal       Meal     @relation(fields: [mealId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model InventoryItem {
  id           String        @id @default(uuid())
  name         String
  currentStock Int
  minimumStock Int
  unit         String
  lastUpdated  DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  wasteRecords WasteRecord[]
}

model WasteRecord {
  id        String        @id @default(uuid())
  itemId    String
  quantity  Int
  reason    String
  date      DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  item      InventoryItem @relation(fields: [itemId], references: [id])
}

model TiffinBox {
  id           String              @id @default(uuid())
  status       TiffinBoxStatusEnum
  lastUsed     DateTime
  damageReport String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model RawMaterial {
  id              String           @id @default(uuid())
  name            String
  category        String
  unit            String
  currentStock    Float
  minimumStock    Float
  costPerUnit     Float
  supplier        String?
  lastUpdated     DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  productionItems ProductionItem[]
  recipeItems     RecipeItem[]
}

model Recipe {
  id              String       @id @default(uuid())
  name            String
  description     String
  instructions    String
  preparationTime Int
  cookingTime     Int
  servings        Int
  costPerServing  Float
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  mealId          String       @unique
  category        MealCategory
  type            MealType
  imageUrl        String?
  meal            Meal         @relation(fields: [mealId], references: [id])
  recipeItems     RecipeItem[]
}

model RecipeItem {
  id            String      @id @default(uuid())
  recipeId      String
  rawMaterialId String
  quantity      Float
  unit          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  recipe        Recipe      @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, rawMaterialId])
}

model ProductionSchedule {
  id        String           @id @default(uuid())
  date      DateTime
  mealType  MealType
  status    ProductionStatus @default(PENDING)
  startTime DateTime
  endTime   DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  mealId    String
  items     ProductionItem[]
  meal      Meal             @relation(fields: [mealId], references: [id])
}

model ProductionItem {
  id                   String               @id @default(uuid())
  productionScheduleId String
  rawMaterialId        String
  requiredQuantity     Float
  actualQuantity       Float?
  status               ProductionItemStatus @default(PENDING)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  productionSchedule   ProductionSchedule   @relation(fields: [productionScheduleId], references: [id])
  rawMaterial          RawMaterial          @relation(fields: [rawMaterialId], references: [id])
}

model MenuItem {
  id          String    @id @default(uuid())
  mealId      String
  price       Float
  mealType    MealType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dailyMenuId String
  dailyMenu   DailyMenu @relation(fields: [dailyMenuId], references: [id])
  meal        Meal      @relation(fields: [mealId], references: [id])
}

model DailyMenu {
  id         String        @id @default(uuid())
  date       DateTime
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  calendarId String?
  calendar   MenuCalendar? @relation(fields: [calendarId], references: [id])
  items      MenuItem[]
}

model MenuCalendar {
  id         String      @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dailyMenus DailyMenu[]
}

model Feedback {
  id          String             @id @default(uuid())
  userId      String
  type        FeedbackType
  title       String
  description String
  rating      Int?
  status      FeedbackStatus     @default(OPEN)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id])
  responses   FeedbackResponse[]
  issues      Issue[]
}

model FeedbackResponse {
  id         String   @id @default(uuid())
  feedbackId String
  userId     String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Issue {
  id          String        @id @default(uuid())
  feedbackId  String
  title       String
  description String
  priority    IssuePriority @default(MEDIUM)
  status      IssueStatus   @default(OPEN)
  assignedTo  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User?         @relation(fields: [assignedTo], references: [id])
  feedback    Feedback      @relation(fields: [feedbackId], references: [id])
}

model DeliveryAgent {
  id              String    @id @default(uuid())
  userId          String    @unique
  currentLocation String?
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  mealCount       Int       @default(35)
  apartmentId     String
  assignedTowers  String[]
  assignedRooms   String[]
  apartment       Apartment @relation(fields: [apartmentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  assignments     DeliveryAssignment[]
}

model Apartment {
  id             String          @id @default(uuid())
  name           String
  address        String
  city           String
  state          String
  postalCode     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deliveryAgents DeliveryAgent[]
  towers         Tower[]
  assignments    DeliveryAssignment[]
}

model Tower {
  id            String    @id @default(uuid())
  name          String
  apartmentId   String
  floors        Int
  roomsPerFloor Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  apartment     Apartment @relation(fields: [apartmentId], references: [id])
}

model CostCategory {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  description String?
  type        CostType
  frequency   CostFrequency
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  costs       Cost[]

  @@map("cost_categories")
}

model Cost {
  id           Int            @id @default(autoincrement())
  categoryId   Int            @map("category_id")
  amount       Decimal        @db.Decimal(10, 2)
  description  String?
  date         DateTime       @db.Date
  status       String         @default("PENDING") @db.VarChar(20)
  approvedById String?        @map("approved_by")
  approvedAt   DateTime?      @map("approved_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  approvals    CostApproval[]
  approvedBy   User?          @relation("CostApprovals", fields: [approvedById], references: [id])
  category     CostCategory   @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([date])
  @@map("costs")
}

model CostApproval {
  id         Int      @id @default(autoincrement())
  costId     Int      @map("cost_id")
  approverId String   @map("approver_id")
  status     String   @db.VarChar(20)
  comments   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  approver   User     @relation(fields: [approverId], references: [id])
  cost       Cost     @relation(fields: [costId], references: [id])

  @@index([costId])
  @@map("cost_approvals")
}

model StaffCost {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  baseSalary      Decimal
  allowances      Decimal       @default(0)
  deductions      Decimal       @default(0)
  paymentFrequency CostFrequency
  bankDetails     Json
  user            User          @relation(fields: [userId], references: [id])
}

model EquipmentCost {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paymentType    String         @default("one-time")
  purchaseDate   DateTime?
  purchaseAmount Decimal?
  emiAmount      Decimal?
  emiFrequency   CostFrequency?
  totalEmis      Int?
  remainingEmis  Int?
  monthlyRent    Decimal?
  securityDeposit Decimal?
  rentDuration   CostFrequency?
}

model FacilityCost {
  id               Int            @id @default(autoincrement())
  name             String
  description      String?
  type             String         @default("kitchen")
  rentAmount       Decimal?
  maintenanceAmount Decimal?
  utilitiesAmount  Decimal?
  frequency        CostFrequency
  startDate        DateTime       @default(now())
  endDate          DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model DeliveryCostConfig {
  id          Int      @id @default(autoincrement())
  costPerAgent Decimal  @default(8000.00)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
  DELIVERY_PARTNER
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatusEnum {
  PENDING
  ASSIGNED
  PICKED_UP
  DELIVERED
  FAILED
}

enum OldTiffinStatusEnum {
  NEW
  USED
  DAMAGED
  LOST
}

enum TiffinBoxStatusEnum {
  AVAILABLE
  IN_USE
  CLEANING
  DAMAGED
  LOST
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProductionItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FeedbackType {
  GENERAL
  MEAL_QUALITY
  DELIVERY
  SERVICE
  OTHER
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MealCategory {
  VEGETARIAN
  NON_VEGETARIAN
  DESSERT
  SNACKS
}

enum CostType {
  FIXED
  VARIABLE
  RAW_MATERIAL
  STAFF
  EQUIPMENT
  FACILITY
}

enum CostFrequency {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum DeliveryAssignmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model DeliveryAssignment {
  id              String                  @id @default(uuid())
  deliveryAgentId String
  apartmentId     String
  startDate       DateTime
  endDate         DateTime
  status          DeliveryAssignmentStatus
  towerNumbers    String[]
  mealCount       Int                     @default(35)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  deliveryAgent   DeliveryAgent           @relation(fields: [deliveryAgentId], references: [id])
  apartment       Apartment               @relation(fields: [apartmentId], references: [id])
}
