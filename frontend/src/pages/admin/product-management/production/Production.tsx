import * as React from 'react';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import type { AppDispatch } from '../../../../store';
import {
  fetchSchedules,
  createSchedule,
  updateSchedule,
  deleteSchedule,
  updateProductionItem,
  autoGenerateSchedule,
  clearError
} from '../../../../store/slices/productionSlice';
import type { RootState } from '../../../../store';
import type { ProductionSchedule, ProductionItem, ProductionStatus, ProductionItemStatus } from '../../../../types/production.types';
import type { MealType } from '../../../../services/production.service';

const MEAL_TYPES: MealType[] = ['BREAKFAST', 'LUNCH', 'DINNER'];

const Production = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { items: schedules, loading, error } = useSelector((state: RootState) => state.production);
  const { meals } = useSelector((state: RootState) => state.meal);
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
  const [selectedMealType, setSelectedMealType] = useState<MealType | ''>('');
  const [openDialog, setOpenDialog] = useState(false);
  const [openAutoGenerateDialog, setOpenAutoGenerateDialog] = useState(false);
  const [selectedSchedule, setSelectedSchedule] = useState<ProductionSchedule | null>(null);
  const [formData, setFormData] = useState({
    date: new Date(),
    mealType: '' as MealType | '',
    mealId: '',
    startTime: new Date(),
    endTime: new Date(),
    items: [] as { rawMaterialId: string; requiredQuantity: number }[]
  });

  useEffect(() => {
    dispatch(fetchSchedules({}));
  }, [dispatch]);

  useEffect(() => {
    if (error) {
      alert(error);
      dispatch(clearError());
    }
  }, [error, dispatch]);

  const handleFilter = () => {
    dispatch(fetchSchedules({
      date: selectedDate || undefined,
      mealType: selectedMealType || undefined
    }));
  };

  const handleCreateSchedule = () => {
    if (!formData.mealType || !formData.mealId) {
      alert('Please select both meal type and meal');
      return;
    }
    dispatch(createSchedule({
      ...formData,
      mealType: formData.mealType as MealType // Type assertion since we've validated it's not empty
    }));
    setOpenDialog(false);
    setFormData({
      date: new Date(),
      mealType: '',
      mealId: '',
      startTime: new Date(),
      endTime: new Date(),
      items: []
    });
  };

  const handleUpdateSchedule = () => {
    if (!selectedSchedule) return;
    if (!formData.mealType || !formData.mealId) {
      alert('Please select both meal type and meal');
      return;
    }
    dispatch(updateSchedule({ 
      id: selectedSchedule.id, 
      data: {
        startTime: formData.startTime,
        endTime: formData.endTime
      }
    }));
    setOpenDialog(false);
    setSelectedSchedule(null);
  };

  const handleDeleteSchedule = (id: string) => {
    if (window.confirm('Are you sure you want to delete this schedule?')) {
      dispatch(deleteSchedule(id));
    }
  };

  const handleUpdateProductionItem = (itemId: string, data: { actualQuantity?: number; status?: ProductionItemStatus }) => {
    dispatch(updateProductionItem({ id: itemId, data }));
  };

  const handleAutoGenerate = () => {
    if (!selectedDate || !selectedMealType) {
      alert('Please select both date and meal type');
      return;
    }
    dispatch(autoGenerateSchedule({
      date: selectedDate,
      mealType: selectedMealType,
      startTime: new Date(),
      endTime: new Date(new Date().setHours(new Date().getHours() + 2))
    }));
    setOpenAutoGenerateDialog(false);
  };

  const filteredMeals = meals.filter(meal => {
    if (!formData.mealType) return true;
    return meal.type === formData.mealType;
  });

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Production Planning</h1>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-md p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
            <input
              type="date"
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              value={selectedDate ? selectedDate.toISOString().split('T')[0] : ''}
              onChange={(e) => setSelectedDate(e.target.value ? new Date(e.target.value) : null)}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Meal Type</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              value={selectedMealType}
              onChange={(e) => setSelectedMealType(e.target.value as MealType)}
            >
              <option value="">All</option>
              {MEAL_TYPES.map((type) => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
          <div className="flex items-end">
            <button
              className="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              onClick={handleFilter}
            >
              Filter
            </button>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="mb-6 space-x-4">
        <button
          className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          onClick={() => {
            setSelectedSchedule(null);
            setFormData({
              date: new Date(),
              mealType: '',
              mealId: '',
              startTime: new Date(),
              endTime: new Date(),
              items: []
            });
            setOpenDialog(true);
          }}
        >
          Create Schedule
        </button>
        <button
          className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
          onClick={() => setOpenAutoGenerateDialog(true)}
        >
          Auto Generate
        </button>
      </div>

      {/* Schedules List */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Meal Type</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Meal</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Time</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Time</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {schedules.map((schedule) => (
              <tr key={schedule.id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {new Date(schedule.date).toLocaleDateString()}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{schedule.mealType}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{schedule.meal.name}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{schedule.status}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {new Date(schedule.startTime).toLocaleTimeString()}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {new Date(schedule.endTime).toLocaleTimeString()}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <button
                    className="text-indigo-600 hover:text-indigo-900 mr-4"
                    onClick={() => {
                      setSelectedSchedule(schedule);
                      setFormData({
                        date: new Date(schedule.date),
                        mealType: schedule.mealType as MealType,
                        mealId: schedule.meal.id,
                        startTime: new Date(schedule.startTime),
                        endTime: new Date(schedule.endTime),
                        items: schedule.items.map(item => ({
                          rawMaterialId: item.rawMaterialId,
                          requiredQuantity: item.requiredQuantity
                        }))
                      });
                      setOpenDialog(true);
                    }}
                  >
                    Edit
                  </button>
                  <button
                    className="text-red-600 hover:text-red-900"
                    onClick={() => handleDeleteSchedule(schedule.id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Create/Edit Dialog */}
      {openDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg w-full max-w-2xl">
            <h2 className="text-xl font-bold mb-4">
              {selectedSchedule ? 'Edit Schedule' : 'Create Schedule'}
            </h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input
                  type="date"
                  className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  value={formData.date.toISOString().split('T')[0]}
                  onChange={(e) => setFormData({ ...formData, date: new Date(e.target.value) })}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Meal Type</label>
                <select
                  className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  value={formData.mealType}
                  onChange={(e) => setFormData({ ...formData, mealType: e.target.value as MealType })}
                >
                  <option value="">Select Meal Type</option>
                  {MEAL_TYPES.map((type) => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Meal</label>
                <select
                  className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  value={formData.mealId}
                  onChange={(e) => setFormData({ ...formData, mealId: e.target.value })}
                >
                  <option value="">Select Meal</option>
                  {filteredMeals.map((meal) => (
                    <option key={meal.id} value={meal.id}>{meal.name}</option>
                  ))}
                </select>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                  <input
                    type="time"
                    className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    value={formData.startTime.toTimeString().slice(0, 5)}
                    onChange={(e) => {
                      const [hours, minutes] = e.target.value.split(':');
                      const newDate = new Date(formData.startTime);
                      newDate.setHours(parseInt(hours), parseInt(minutes));
                      setFormData({ ...formData, startTime: newDate });
                    }}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                  <input
                    type="time"
                    className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                    value={formData.endTime.toTimeString().slice(0, 5)}
                    onChange={(e) => {
                      const [hours, minutes] = e.target.value.split(':');
                      const newDate = new Date(formData.endTime);
                      newDate.setHours(parseInt(hours), parseInt(minutes));
                      setFormData({ ...formData, endTime: newDate });
                    }}
                  />
                </div>
              </div>
            </div>
            <div className="mt-6 flex justify-end space-x-4">
              <button
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                onClick={() => setOpenDialog(false)}
              >
                Cancel
              </button>
              <button
                className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                onClick={selectedSchedule ? handleUpdateSchedule : handleCreateSchedule}
              >
                {selectedSchedule ? 'Update' : 'Create'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Auto Generate Dialog */}
      {openAutoGenerateDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Auto Generate Schedule</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input
                  type="date"
                  className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  value={selectedDate ? selectedDate.toISOString().split('T')[0] : ''}
                  onChange={(e) => setSelectedDate(e.target.value ? new Date(e.target.value) : null)}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Meal Type</label>
                <select
                  className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  value={selectedMealType}
                  onChange={(e) => setSelectedMealType(e.target.value as MealType)}
                >
                  <option value="">Select Meal Type</option>
                  {MEAL_TYPES.map((type) => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
            </div>
            <div className="mt-6 flex justify-end space-x-4">
              <button
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                onClick={() => setOpenAutoGenerateDialog(false)}
              >
                Cancel
              </button>
              <button
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
                onClick={handleAutoGenerate}
              >
                Generate
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Production; 